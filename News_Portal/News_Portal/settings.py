"""
Django settings for News_Portal project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import logging
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-41e(u7kwhyp_252)e#tzyj)o!n3yc_m&c0glx$c%tp2l%@nr=$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django.contrib.sites',
    'django.contrib.flatpages',
    'NewsApp.apps.NewsappConfig',


    'my_subscriptions.apps.MySubscriptionsConfig',
    'django_filters',
    'django_apscheduler',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.yandex',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.locale.LocaleMiddleware',

    'basic.middlewares.TimezoneMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',

]

SIDE_ID = 1

ROOT_URLCONF = 'News_Portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'NewsApp/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
    },
]

WSGI_APPLICATION = 'News_Portal.wsgi.application'

LANGUAGES = [
    ('en', 'English'),
    ('fr', 'French'),
    ('ru', 'Русский')
]
# База данных
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "/NewsApp"

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_FORMS = {"signup": "accounts.forms.CustomSignupForm"}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

EMAIL_HOST = 'smtp.yandex.ru'

EMAIL_PORT = 465

EMAIL_HOST_USER = "IronPress"
# логин пользователя почтового сервера
EMAIL_HOST_PASSWORD = "zuqvkobqbkixymje"  # noqa
# пароль пользователя почтового сервера
EMAIL_USE_TLS = False
# необходимость использования TLS
# (зависит от почтового сервера,
# смотрите документацию по настройке работы с сервером по SMTP)
EMAIL_USE_SSL = True
# необходимость использования SSL
# (зависит от почтового сервера,
# смотрите документацию по настройке работы с сервером по SMTP)

DEFAULT_FROM_EMAIL = "ironpress@yandex.ru"
# Почтовый адрес отправителя по умолчанию
# Последняя строчка будет использоваться как значение по умолчанию
# для поля from в письме.
# То есть будет отображаться в поле «отправитель» у получателя письма.

SERVER_EMAIL = "ironpress@yandex.ru"
# SERVER_EMAIL содержит адрес почты, от имени которой будет отправляться письмо
# при вызове mail_admins и mail_manager.
# А переменная MANAGERS будет хранить список имён менеджеров и адресов
# их почтовых ящиков.

ADMINS = (
    ('ADMIN', 'Swaggadanil@mail.ru'),
    ('admin', 'Swaggadanil@mail.ru'),
)

EMAIL_SUBJECT_PREFIX = 'News Portal'

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),
    }
}

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#
#     'formatters': {
#         'custom-format-D': {
#             'format': '%(asctime)s %(levelname)s %(message)s'
#         },
#         'custom-format-I': {
#             'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
#         },
#         'custom-format-W': {
#             'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s'
#         },
#         'custom-format-EC': {
#             'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s'
#         },
#         'email_format': {
#             'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s'
#         },
#     },
#     'filters': {
#         'If_Debug_False': {
#
#             '()': 'django.utils.log.RequireDebugFalse'
#         },
#         "If_Debug_True": {
#             "()": "django.utils.log.RequireDebugTrue",
#         }
#
#     },
#     'handlers': {
#
#         'console': {
#             'class': 'logging.StreamHandler',
#             'formatter': 'custom-format-D',
#             'level': 'DEBUG',
#             'filters': ['If_Debug_True']
#         },
#         "console_error": {
#             "class": "logging.StreamHandler",
#             "formatter": "custom-format-W",
#             "filters": ['If_Debug_True'],
#             "level": "ERROR",
#         },
#         "console_warning": {
#             "class": "logging.StreamHandler",
#             "formatter": "custom-format-EC",
#             "filters": ['If_Debug_True'],
#             "level": "WARNING",
#         },
#
#         'general_file': {
#             'class': 'logging.FileHandler',
#             'filename': 'logs/general.log',
#             'level': 'INFO',
#             'formatter': 'custom-format-I',
#             'filters': ['If_Debug_False']
#         },
#
#         'errors_file': {
#             'class': 'logging.FileHandler',
#             'filename': 'logs/errors.log',
#             'level': 'ERROR',
#             'formatter': 'custom-format-EC'
#         },
#
#         'security_file': {
#             'class': 'logging.FileHandler',
#             'filename': 'logs/security.log',
#             'level': 'INFO',
#             'formatter': 'custom-format-W'
#         },
#
#         'mail_admins': {
#             'class': 'django.utils.log.AdminEmailHandler',
#             'level': 'ERROR',
#             'formatter': 'email_format'
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': [
#                 'console',
#                 'general_file',
#                 'errors_file',
#                 'mail_admins'
#             ],
#             'level': 'DEBUG',
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['errors_file', 'mail_admins'],
#             'level': 'ERROR',
#             'propagate': True
#         },
#         'django.server': {
#             'handlers': ['errors_file', 'mail_admins'],
#             'level': 'ERROR',
#             'propagate': True
#         },
#         'django.template': {
#             'handlers': ['errors_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.db.backends': {
#             'handlers': ['errors_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#         'django.security': {
#             'handlers': ['security_file', 'mail_admins'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#     },
# }
#
# logger = logging.getLogger("django")
